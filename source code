#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <conio.h>

int fx, fy;
int gs;
bool wic;
int height = 20;
int width = 100;
int player_1_Score = 0;
int player_2_Score = 0;
char input;
char s1_direction = 'a';
char s2_direction = 'j';
char key2='l';
char key='d';

struct node
{
    int x;
    int y;
    char b;
};
struct snake
{
    struct node body[1000];
    int L;
};
struct snake s1;
struct snake s2;

void moveCursor(int x, int y)
{
    COORD coord;
    coord.X = x;
    coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}

void clearScreen()
{
    system("cls");
}



bool check_overlaping_s1(int x,int y)
{
 for (int i = 0; i < s2.L; i++)
    {
        if (x == s2.body[i].x && y == s2.body[i].y)
        {
            return false;
        }
    }
    return true;
}

bool check_overlaping_s2(int x,int y)
{
 for (int i = 0; i < s1.L; i++)
    {
        if (x == s1.body[i].x && y == s1.body[i].y)
        {
            return false;
        }
    }
    return true;
}

bool died()
{
    for (int i = 1; i < s1.L; i++)
    {
        if (s1.body[0].x == s1.body[i].x && s1.body[0].y == s1.body[i].y)
        {
            wic=false;
            return true;
        }
    }

    if (s1.body[0].x == width - 1 || s1.body[0].y == height - 1 || s1.body[0].x == 1 || s1.body[0].y == 0)
    {    wic=false;
        return true;
    }

    for (int i = 1; i < s2.L; i++)
    {
        if (s2.body[0].x == s2.body[i].x && s2.body[0].y == s2.body[i].y)
        {   wic=true;
            return true;
        }
    }

    if (s2.body[0].x == width - 1 || s2.body[0].y == height - 1 || s2.body[0].x == 1 || s2.body[0].y == 0)
    {    wic=true;
        return true;
    }

    if(player_1_Score==5)
    {
        wic=true;
        return true;

    }
    else if(player_2_Score==5)
    { 
        wic=false;
        return true;
    }
    

    return false;
}

void make_food()
{
    bool flag;
    do
    {
        flag = false;
        fy = (rand() % (height - 1)) + 1;
        fx = (rand() % (width - 1)) + 1;

        if (fx == 0)
        {
            fx++;
        }
        if (fy == 0)
        {
            fy++;
        }

        for (int i = 0; i < s1.L; i++)
        {
            if (fx == s1.body[i].x && fy == s1.body[i].y || fx == s2.body[i].x && fy == s2.body[i].y)
            {
                flag = true;
                break;
            }
        }
    } while (flag);

    moveCursor(fx, fy);
    printf("@");
}

void draw_snake_1()
{
    for (int i = 0; i < s1.L; i++)
    {
        moveCursor(s1.body[i].x, s1.body[i].y);
        printf("%c", s1.body[i].b);
    }
}

void draw_snake_2()
{
    for (int i = 0; i < s2.L; i++)
    {
        moveCursor(s2.body[i].x, s2.body[i].y);
        printf("%c", s2.body[i].b);
    }
}
DWORD WINAPI snake_input(LPVOID lpParam)
{
    while(!died())
{   Sleep(500);
  input= getch();
if(input=='a'||input=='A'||input=='s'||input=='S'||input=='d'||input=='D'||input=='w'||input=='W')
{if((s1_direction=='d'||s1_direction=='D')&&(input=='a'||input=='A'))
{
    
}
else if((s1_direction=='a'||s1_direction=='A')&&(input=='d'||input=='D'))
{

}
else if((s1_direction=='s'||s1_direction=='S')&&(input=='w'||input=='W'))
{

}
else if((s1_direction=='w'||s1_direction=='W')&&(input=='s'||input=='S'))
{

}
else if(input=='t')
{
    key=input;
}
else
    {
        key=input;
        }

}
else if(input=='J'||input=='j'||input=='k'||input=='K'||input=='L'||input=='l'||input=='I'||input=='i')
{if((s2_direction=='j'||s2_direction=='J')&&(input=='l'||input=='L'))
 {

 }
else if((s2_direction=='l'||s2_direction=='L')&&(input=='j'||input=='J'))
 {
    
 }
else if((s2_direction=='k'||s2_direction=='K')&&(input=='i'||input=='I'))
 {
    
 }
 else if((s2_direction=='i'||s2_direction=='I')&&(input=='k'||input=='K'))
 {
    
 }
 else
 {
    key2=input;
 }
}
}
}


DWORD WINAPI move_snake(LPVOID lpParam)
{
    while (!died())
    {eating();
        Sleep(gs);
        if ((key == 'd' || key == 'D') && s1_direction != 'a' && s1_direction != 'A' && check_overlaping_s1(s1.body[0].x+1,s1.body[0].y))
        {
            if (s1.body[0].x <= (width - 2))
            {
                moveCursor(s1.body[s1.L - 1].x, s1.body[s1.L - 1].y);
                printf(" ");
                for (int i = s1.L - 1; i > 0; i--)
                {
                    s1.body[i].x = s1.body[i - 1].x;
                    s1.body[i].y = s1.body[i - 1].y;
                }
                s1.body[0].x++;
                draw_snake_1();
                s1_direction = key;
            }
        }

        else if ((key == 'a' || key == 'A') && s1_direction != 'd' && s1_direction != 'D' && check_overlaping_s1(s1.body[0].x-1,s1.body[0].y))
        {

            if (s1.body[0].x >= 1)
            {
                moveCursor(s1.body[s1.L - 1].x, s1.body[s1.L - 1].y);
                printf(" ");
                for (int i = s1.L - 1; i > 0; i--)
                {
                    s1.body[i].x = s1.body[i - 1].x;
                    s1.body[i].y = s1.body[i - 1].y;
                }

                s1_direction = key;
                s1.body[0].x--;
                draw_snake_1();
            }
        }

        else if ((key == 'w' || key == 'W') && s1_direction != 's' && s1_direction != 'S' && check_overlaping_s1(s1.body[0].x,s1.body[0].y-1))
        {
            if (s1.body[0].y >= 1)
            {
                moveCursor(s1.body[s1.L - 1].x, s1.body[s1.L - 1].y);
                printf(" ");

                for (int i = s1.L - 1; i > 0; i--)
                {
                    s1.body[i].x = s1.body[i - 1].x;
                    s1.body[i].y = s1.body[i - 1].y;
                }
                s1.body[0].y--;
                draw_snake_1();
                s1_direction = key;
            }
        }
        else if ((key == 's' || key == 'S') && s1_direction != 'w' && s1_direction != 'W' && check_overlaping_s1(s1.body[0].x,s1.body[0].y+1))
        {
            if (s1.body[0].y <= height - 2)
            {
                moveCursor(s1.body[s1.L - 1].x, s1.body[s1.L - 1].y);
                printf(" ");

                for (int i = s1.L - 1; i > 0; i--)
                {
                    s1.body[i].x = s1.body[i - 1].x;
                    s1.body[i].y = s1.body[i - 1].y;
                }

                s1.body[0].y++;
                draw_snake_1();
                s1_direction = key;
            }
        }

        if ((key2 == 'l' || key2 == 'L') && s2_direction != 'j' && s2_direction != 'J' && check_overlaping_s2(s2.body[0].x+1,s2.body[0].y))
        {
            if (s2.body[0].x <= (width - 2))
            {
                moveCursor(s2.body[s2.L - 1].x, s2.body[s2.L - 1].y);
                printf(" ");
                for (int i = s2.L - 1; i > 0; i--)
                {
                    s2.body[i].x = s2.body[i - 1].x;
                    s2.body[i].y = s2.body[i - 1].y;
                }
                s2.body[0].x++;
                draw_snake_2();
                s2_direction = key2;
            }
        }

        else if ((key2 == 'j' || key2 == 'J') && s2_direction != 'l' && s2_direction != 'L' && check_overlaping_s2(s2.body[0].x-1,s2.body[0].y))
        {

            if (s2.body[0].x >= 1)
            {
                moveCursor(s2.body[s2.L - 1].x, s2.body[s2.L - 1].y);
                printf(" ");

                for (int i = s2.L - 1; i > 0; i--)
                {
                    s2.body[i].x = s2.body[i - 1].x;
                    s2.body[i].y = s2.body[i - 1].y;
                }
                s2_direction = key2;
                s2.body[0].x--;
                draw_snake_2();
            }
        }

        else if ((key2 == 'i' || key2 == 'I') && s2_direction != 'k' && s2_direction != 'K' && check_overlaping_s2(s2.body[0].x,s2.body[0].y-1))
        {
            if (s2.body[0].y >= 1)
            {
                moveCursor(s2.body[s2.L - 1].x, s2.body[s2.L - 1].y);
                printf(" ");

                for (int i = s2.L - 1; i > 0; i--)
                {
                    s2.body[i].x = s2.body[i - 1].x;
                    s2.body[i].y = s2.body[i - 1].y;
                }
                s2.body[0].y--;
                draw_snake_2();
                s2_direction = key2;
            }
        }

        else if ((key2 == 'k' || key2 == 'K') && s2_direction != 'i' && s2_direction != 'I' && check_overlaping_s2(s2.body[0].x+1,s2.body[0].y+1))
        {
            if (s2.body[0].y <= height - 2)
            {
                moveCursor(s2.body[s2.L - 1].x, s2.body[s2.L - 1].y);
                printf(" ");

                for (int i = s2.L - 1; i > 0; i--)
                {
                    s2.body[i].x = s2.body[i - 1].x;
                    s2.body[i].y = s2.body[i - 1].y;
                }

                s2.body[0].y++;
                draw_snake_2();
                s2_direction = key2;
            }
        }
    }
}
/*DWORD WINAPI key_snake_2(LPVOID lpParam)
{
    while(!died())
{   Sleep(100);
char tt=key2;
  key2= getch();
if(key2!='i'||key!='I'||key!='J'||key!='j'||key!='K'||key!='k'||key!='l'||key!='L')
{
    key2=tt;
}


}


}*/


void set_snake_1()
{

    s1.body[0].x = width / 2;
    s1.body[0].y = height / 2;
    moveCursor(s1.body[0].x, s1.body[0].y);
    s1.body[0].b = 'O';
    s1.L = 1;
    printf("%c", s1.body[0].b);
}

void set_snake_2()
{

    s2.body[0].x = width / 2;
    s2.body[0].y = (height / 2) + 2;
    moveCursor(s2.body[0].x, s2.body[0].y);
    s2.body[0].b = 'C';
    s2.L = 1;
    printf("%c", s2.body[0].b);
}

void eating()
{
    if (s1.body[0].x == fx && s1.body[0].y == fy)
    {
        s1.body[s1.L].b = 'o';
        s1.body[s1.L].x = (s1.body[s1.L - 1].x - 1);
        s1.body[s1.L].y = (s1.body[s1.L - 1].y);
        s1.L++;
        draw_snake_1();
        player_1_Score++;
     moveCursor((width / 2) - 25, (height) + 1);
        printf("P1 Socre : %d", player_1_Score);
        make_food(); // Generate new food
    }

   else if (s2.body[0].x == fx && s2.body[0].y == fy)
    {
        s2.body[s2.L].b = 'c';
        s2.body[s2.L].x = (s2.body[s2.L - 1].x - 1);
        s2.body[s2.L].y = (s2.body[s2.L - 1].y);
        s2.L++;
        draw_snake_2();
        player_2_Score++;
         moveCursor((width / 2) + 25, (height) + 1);
        printf("P2 Socre : %d", player_2_Score);
        make_food(); // Generate new food
    }
    
}


void make_frame()
{
    for (int y = 0; y < height; y++)
    {
        for (int x = 0; x < width; x++)
        {
            if (x == 0 || x == width - 1 || y == 0 || y == height - 1)
            {
                printf("*");
            }
            else
            {
                printf(" ");
            }
        }
        printf("\n");
    }
    moveCursor((width / 2) - 25, (height) + 1);
    printf("P1 Socre : %d", player_1_Score);
    moveCursor((width / 2) + 25, (height) + 1);
    printf("P2 Socre : %d", player_2_Score);
}

int main()
{clearScreen();
    char cc;

bool ch=true;
while(ch){
        moveCursor((width / 2), (height / 2));
    printf("Enter Game Difficulty");
    moveCursor((width / 2), (height / 2)+1);
      printf("1.EASY");
    moveCursor((width / 2), (height / 2)+2);
        printf("2.MEDIUM");
    moveCursor((width / 2), (height / 2)+3);
     printf("3.HARD");
         moveCursor((width / 2), (height / 2)+4);
         printf("player that scores 5 First will won the game");
                     moveCursor((width / 2), (height / 2)+5);
                     printf("ENTER CHOICE:");
 
     cc=getch();
     if(cc=='1')
     {
        gs=500;
        ch=false;
     }
     else if(cc=='2')
     {
        gs=300;
        ch=false;
     }
     else if(cc=='3')
     {
        gs=200;
        ch=false;
     }
     else
     {moveCursor((width / 2), (height / 2)-1);
        printf("invalid choice enter again");
     }
}


    clearScreen();
    make_frame();
    set_snake_1();
    set_snake_2();
    make_food();
      HANDLE hThread1, hThread2,hThread3;

    // Create thread 1
    hThread1 = CreateThread(NULL, 0, move_snake, NULL, 0, NULL);
    if (hThread1 == NULL)
    {
        printf("Error creating thread 1\n");
        return 1;
    }

    // Create thread 2
   hThread2 = CreateThread(NULL, 0, snake_input, NULL, 0, NULL);
    if (hThread2 == NULL)
    {
        printf("Error creating thread 2\n");
        return 1;
    }

   
//move_snack_1();

   do
    {
Sleep(1000);

    } while (!died());


       
       //CloseHandle(hThread4);


    moveCursor((width / 2), (height / 2));
    printf("GAME OVER");
    moveCursor((width / 2) - 2, (height / 2) + 1);
    printf("P1 Socred : %d", player_1_Score);

    moveCursor((width / 2) - 2, (height / 2) + 3);
    printf("P2 Socred : %d", player_2_Score);

moveCursor((width / 2) - 2, (height / 2) + 5);
    if(wic)
    {   

        printf("Player 1 is Winner");
    }
    else if(!wic)
    {
        printf("Player 2 is Winner");

    }
        moveCursor((width / 2) - 2, (height / 2) + 20);


    return 0;
}
